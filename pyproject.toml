[project]
name = "quick-td-backend"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
  "beanie>=1.29.0",
  "fastapi[standard]>=0.115.12",
  "pathlib>=1.0.1",
  "psutil>=7.0.0",
  "pydantic-config>=0.3.0",
  "pydantic-core>=2.33.1",
  "pydantic-settings>=2.8.1",
  "pyfiglet>=1.0.2",
  "python-decouple>=3.8",
  "uvicorn[standard]>=0.34.0",
]

[dependency-groups]
dev = [
  "autoflake>=2.3.1",
  "commitizen>=4.5.0",
  "coverage>=7.8.0",
  "flake8>=7.2.0",
  "isort>=6.0.1",
  "pre-commit>=4.2.0",
  "pylint>=3.3.6",
  "pylint-pydantic>=0.3.5",
  "pytest>=8.3.5",
  "pytest-asyncio>=0.26.0",
  "pytest-cov>=6.1.1",
  "pytest-mock>=3.14.0",
  "python-semantic-release>=9.21.0",
  "ruff>=0.11.4",
]

[tool.commitizen]
name = "cz_customize"
version = "v0.1.0"
tag_format = "v$version"
bump_message = ":arrow_up: bump: version $current_version ‚Üí $new_version"

[tool.commitizen.customize]
message_template = "{{change_type}}{% if scope != '' -%}({{ scope }}){% endif %}: {{message}}{% if description != '' -%}{{'\n'}}{{'\n'}}{{description}}{% endif %}{% if issues != '' -%}{{'\n'}}{{'\n'}}{%for issue in issues.split(',')%}Closes #{{issue.strip()}} {%endfor%}{% endif %}"
example = ":sparkles: feat: this feature enable customize through config file"
schema = "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<issues>"
schema_pattern = ":+[a-z_0-9]+:+ +(breaking|feat|bugfix|hotfix|refactor|perf|docs|test|style|build|chore|ci|arch|wip|package|poop|bump)+(([(]+[a-z_0-9]+[)])?)+:(\\s.*)"
bump_pattern = "^(:boom: breaking|:sparkles: feat|:bug: bugfix|:ambulance: hotfix|:recycle: refactor|:zap: perf)"
bump_map = { ":boom: breaking" = "MAJOR", ":sparkles: feat" = "MINOR", ":bug: bugfix" = "PATCH", ":ambulance: hotfix" = "PATCH", ":recycle: refactor" = "PATCH", ":zap: perf" = "PATCH" }
change_type_order = ["breaking", "feat", "hotfix", "bugfix", "perf"]
info = """
This is a customized version of the commitizen template, based on a extended version of conventional commits.
Includes more change types and a customized message template. Also includes gitmoji and github issues support.
Question validation features are not implemented yet.
"""
commit_parser = '^(?P<change_type>:boom: breaking|:sparkles: feat|:bug: bugfix|:ambulance: hotfix|:zap: perf)+(?:\((?P<scope>[^()\r\n]*)\)|\()?(?P<breaking>!)?:\s(?P<message>.*)?'
changelog_pattern = "^(:boom: breaking|:sparkles: feat|:bug: bugfix|:ambulance: hotfix|:zap: perf)"
change_type_map = { ":boom: breaking" = "üí• Breaking changes", ":sparkles: feat" = "‚ú® Features", ":bug: bugfix" = "üêõ Fixed Bugs", ":recycle: refactor" = "‚ô≤ Refactorings", ":zap: perf" = "‚ö° Performance improvements" }

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
  { value = ":boom: breaking", name = "üí• breaking: Use to indicate a breaking change. Correlates to MAJOR in SemVer." },
  { value = ":sparkles: feat", name = "‚ú® feat: Add a new feature. Correlates to MINOR in SemVer" },
  { value = ":bug: bugfix", name = "üêõ bugfix: Solves a non critical bug. Correlates to PATCH in SemVer" },
  { value = ":ambulance: hotfix", name = "üöë hotfix: Solves a critcal bug or error. Correlates to PATCH in SemVer" },
  { value = ":recycle: refactor", name = "‚ôªÔ∏è refactor: Code change that neither fixes a bug nor add a feature. Correlates to PATCH in SemVer" },
  { value = ":zap: perf", name = "‚ö° perf: Change that improves performance. Correlates to PATCH in SemVer" },
  { value = ":memo: docs", name = "üìù docs: App or code documentation only change." },
  { value = ":white_check_mark: test", name = "‚úÖ test: Add or modify tests." },
  { value = ":art: style", name = "üé® style: Apply visual changes to the codebase." },
  { value = ":construction_worker: build", name = "üë∑ build: Changes that affect the build system or external dependencies (example scripts, environment variables, etc.)" },
  { value = ":wrench: chore", name = "üîß chore: Changes to development related tools and settings that doen't add or modify source code (example linting, deploying, etc.)" },
  { value = ":green_heart: ci", name = "üíö ci: Changes to the CI or CD tools." },
  { value = ":building_construction: arch", name = "üèó arch: Changes to the architecture of the application like moving, dividing or merging files." },
  { value = ":construction: wip", name = "üöß wip: Work in progress. Use when commit does not ends a feature, fix or other changes." },
  { value = ":twisted_rightwards_arrows: sync", name = "üîÄ sync: Synchronize or merge code with remote repository." },
  { value = ":rewind: revert", name = "‚è™ revert: Revert to a previous commit." },
  { value = ":package: package", name = "üì¶ package: Changes to the project dependencies or package manager." },
  { value = ":poop: improvable", name = "üí© poop: Commit code that needs to be refactored later. Use when you need to refactor code but don't have time to do it right now." },
]
message = "Select the type of change you are committing"


[[tool.commitizen.customize.questions]]
type = "input"
name = "scope"
message = "What is the scope of this change? (app name, package name, function, setting scope, etc.) [ENTER to skip]"
default = ""

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Write a short, imperative tense description of the change (lowercase, no periods)\nFor example: add feature xyz, fix bug 123, deprecate abc\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "description"
message = "Write a longer description of the change. Feel free to use gitmoji for each sentence. [ENTER to skip]\n"
default = ''

[[tool.commitizen.customize.questions]]
type = "input"
name = "issues"
message = "Write closed github issues if there are, comma separated.\nPLEASE BE CAREFUL, INPUT VALIDATION IS NOT IMPLEMENTED YET. [ENTER to skip]\n"
default = ''

[tool.semantic_release]
commit_message = "üîñ release({version}): release nuop-utils-ms\n\nAutomatically generated by python-semantic-release"
version_variable = ["app/__init__.py:__version__"]
tag_format = "v{version}"
prerelease_tag = "{tag_format}-{prerelease_tag}.<prerelease_number>"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_pattern = ["README.md:rev: v{version}"]
major_on_zero = true
commit_version_number = true
upload_to_PyPI = false
upload_to_repository = false
upload_to_release = true
build_command = "pip install poetry && poetry build"

[tool.semantic_release.remote]
name = "origin"
type = "github"
token = { env = "GITHUB_TOKEN" }

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.branches.main]
match = "(main|master)"

[tool.semantic_release.branches.dev]
match = "(dev|develop)"
prerelease = true
prerelease_token = "beta"

[tool.semantic_release.branches."patches"]
match = "^(bugfix|hotfix|fix)\\/.*"
prerelease = true
prerelease_token = "patch"

[tool.semantic_release.branches."features"]
match = "^(feature|feat)\\/.*"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.isort]
profile = "ruff"
