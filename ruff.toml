# Ruff General Config
# Exclude a variety of commonly ignored directories.
# ignore = ["C0114"]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Set the maximum line length to 79.
line-length = 120
indent-width = 4
target-version = "py311"

# Ruff Format Config
[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Ruff Lint Config
[lint]
select = ["ALL"]
ignore = [
  "T201",   # for prints
  "ERA001", # for commented code
  "D100",   # for missing docstrings at beginning of file
  "D103",   # for missing docstrings at each public function
  "D400",   # for first line in docstring requiring a period
  "D417",   # Require docstrings for all functions, classes, and modules on Google Convention
  "D415",
  "TRY003", # For avoid "large messages" in errors
  "TRY300", # Avoids using Consider moving this statement to an `else` block
  "RET504", # Unnecessary assignment to value before return statement
]

# Selection of handlings
task-tags = [
  "TODO",
  "FIXME",
  "HACK",
  "XXX",
  "BUG",
  "NOTE",
  "OPTIMIZE",
  "REFACTOR",
  "REVIEW",
]

# # Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# # overlap with the use of a formatter, like Black, but we can override this behavior by
# # explicitly adding the rule.
# extend-select = ["E501"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
[lint.per-file-ignores]
"__init__.py" = [
  "E402",
  "D104", # for missing docstrings at each module
]
"**/{tests,docs,tools}/*" = [
  "E402",
  "INP001",
  "S",
  "D103",     # for missing docstrings at each function
  "ASYNC230", # On regards the usage of with open() as f: f.write()
  "PTH123",   # On regards the usage of with open() as f: f.write()
]

# FLAKE8 CONFIGURATION
[lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[lint.flake8-annotations]
allow-star-arg-any = true

# [lint.flake8-boolean-trap]
# extend-allowed-calls = ["pydantic.Field", "django.db.models.Value"]

[lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[lint.flake8-errmsg]
max-string-length = 120

[lint.flake8-quotes]
docstring-quotes = "double"

# ISORT CONFIGURATION
[lint.isort]
case-sensitive = false
combine-as-imports = true
constants = ["constant"]
force-single-line = false
length-sort = true
length-sort-straight = true

# PYLINT CONFIGURATION
[lint.pylint]
allow-dunder-method-names = ["__tablename__", "__table_args__"]

# PydocStyle
[lint.pydocstyle]
convention = "google" # Hard to decide between google or pep257, for the moment. Just Google
